// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @unique @default(uuid())
  avatarName       String?    @unique
  hashedPassword   String?
  name             String?
  email            String?    @unique
  emailVerified    DateTime?  @map(name: "email_verified")
  image            String?
  oneLiner         String?
  profileTags      String[]
  link             String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  createdPrompts   Prompt[]   @relation("createdBy")
  starredPrompt    Star[]
  bookmarkedPrompt Bookmark[]
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Prompt {
  id           String     @id @default(uuid())
  createdBy    String
  title        String
  body         String
  starredby    Star[]
  bookmarkedby Bookmark[]
  tags         Tag[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  creator      User       @relation("createdBy", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("prompts")
}

model Tag {
  id        String   @id @default(uuid())
  promptRel Prompt[]
  name      String
  slug      String   @unique
}

model Star {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId String

  @@id([userId, promptId])
}

model Bookmark {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId String

  @@id([userId, promptId])
}
